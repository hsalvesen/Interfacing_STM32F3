
Exercise-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d0  080003d0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d0  080003d0  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080003d0  080003d0  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d0  080003d0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080003d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002004c  2**0
                  CONTENTS
 10 .bss          0000001c  2000004c  2000004c  0002004c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  0002004c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000000dc  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000087  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  000201e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00020248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f34  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004f0  00000000  00000000  000211ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003b09  00000000  00000000  0002169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000251a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000251f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000004c 	.word	0x2000004c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003b8 	.word	0x080003b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000050 	.word	0x20000050
 80001d0:	080003b8 	.word	0x080003b8

080001d4 <assembly_function>:

@ this is the entry function called from the c file
assembly_function:

@ run the functions to perform the config of the ports
	BL initialise_power
 80001d4:	f000 f881 	bl	80002da <initialise_power>
	@BL change_clock_speed
	BL enable_peripheral_clocks
 80001d8:	f000 f823 	bl	8000222 <enable_peripheral_clocks>
	BL enable_uart4
 80001dc:	f000 f827 	bl	800022e <enable_uart4>

@ initialise the buffer and counter
	LDR R6, =incoming_buffer
 80001e0:	4e43      	ldr	r6, [pc, #268]	; (80002f0 <initialise_power+0x16>)
	LDR R7, =incoming_counter
 80001e2:	4f44      	ldr	r7, [pc, #272]	; (80002f4 <initialise_power+0x1a>)
	LDRB R7, [R7]
 80001e4:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00
 80001e6:	f04f 0800 	mov.w	r8, #0

080001ea <loop_forever>:
	@ B tx_loop

@ continue reading forever (NOTE: eventually it will run out of memory as we don't have a big buffer
loop_forever:

	LDR R0, =UART4 @ the base address for the register to set up UART4
 80001ea:	4843      	ldr	r0, [pc, #268]	; (80002f8 <initialise_power+0x1e>)
	LDR R1, [R0, USART_ISR] @ load the status of the UART4
 80001ec:	69c1      	ldr	r1, [r0, #28]

	TST R1, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 80001ee:	f011 0f0a 	tst.w	r1, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error
 80001f2:	d111      	bne.n	8000218 <clear_error>

	TST R1, 1 << UART_RXNE @ 'AND' the current status with the bit mask that we are interested in
 80001f4:	f011 0f20 	tst.w	r1, #32
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ loop_forever @ loop back to check status again if the flag indicates there is no byte waiting
 80001f8:	d0f7      	beq.n	80001ea <loop_forever>

	LDRB R3, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 80001fa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	STRB R3, [R6, R8]
 80001fe:	f806 3008 	strb.w	r3, [r6, r8]
	ADD R8, #1
 8000202:	f108 0801 	add.w	r8, r8, #1

	CMP R7, R8
 8000206:	4547      	cmp	r7, r8
	BGT no_reset
 8000208:	dc01      	bgt.n	800020e <no_reset>
	MOV R8, #0
 800020a:	f04f 0800 	mov.w	r8, #0

0800020e <no_reset>:

no_reset:

	LDR R1, [R0, USART_RQR] @ load the status of the UART4
 800020e:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_RXFRQ
 8000210:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0, USART_RQR]
 8000214:	6181      	str	r1, [r0, #24]

	BGT loop_forever
 8000216:	dce8      	bgt.n	80001ea <loop_forever>

08000218 <clear_error>:



clear_error:

	LDR R1, [R0, USART_ICR] @ load the status of the UART4
 8000218:	6a01      	ldr	r1, [r0, #32]
	@ Clear the overrun/frame error flag (see page 897)
	ORR R1, 1 << UART_ORECF | 1 << UART_FECF
 800021a:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0, USART_ICR] @ load the status of the UART4
 800021e:	6201      	str	r1, [r0, #32]
	B loop_forever
 8000220:	e7e3      	b.n	80001ea <loop_forever>

08000222 <enable_peripheral_clocks>:



@ function to enable the clocks for the peripherals we are using (A, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000222:	4836      	ldr	r0, [pc, #216]	; (80002fc <initialise_power+0x22>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 8000224:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 8000226:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 800022a:	6141      	str	r1, [r0, #20]
	BX LR @ return
 800022c:	4770      	bx	lr

0800022e <enable_uart4>:

@ function to enable the UART4 - this requires setting the alternate functions for the UART4 pins
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
enable_uart4:
	LDR R0, =GPIOC
 800022e:	4834      	ldr	r0, [pc, #208]	; (8000300 <initialise_power+0x26>)
	MOV R1, 0x55	@ set the alternate function for the UART4 pins (PC10 and PC11)
 8000230:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 1]
 8000234:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

	LDR R1, =0x00A00000 @ Mask for pins PC10 and PC11 to use the alternate function
 8000238:	f44f 0120 	mov.w	r1, #10485760	; 0xa00000
	STR R1, [R0, GPIO_MODER]
 800023c:	6001      	str	r1, [r0, #0]

	LDR R1, =0x00F00000 @ Set the speed for PC10 and PC11 to use high speed
 800023e:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
	STR R1, [R0, GPIO_OSPEEDR]
 8000242:	6081      	str	r1, [r0, #8]

	@ UART4EN is bit number 19, we need to turn the clock on for this
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000244:	482d      	ldr	r0, [pc, #180]	; (80002fc <initialise_power+0x22>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 8000246:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4EN  @ apply the bit mask to the previous values of the enable UART4
 8000248:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 800024c:	61c1      	str	r1, [r0, #28]

	@ this is the baud rate
@	MOV R1, #0xD0 @ from our earlier calculations (for 24MHz), store this in register R1
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 800024e:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 8000252:	4829      	ldr	r0, [pc, #164]	; (80002f8 <initialise_power+0x1e>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000254:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART4 @ the base address for the register to set up UART4
 8000256:	4828      	ldr	r0, [pc, #160]	; (80002f8 <initialise_power+0x1e>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000258:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 800025a:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 800025e:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000260:	4770      	bx	lr

08000262 <tx_loop>:




tx_loop:
	LDR R3, =tx_string
 8000262:	4b28      	ldr	r3, [pc, #160]	; (8000304 <initialise_power+0x2a>)
	LDR R4, =tx_length
 8000264:	4c28      	ldr	r4, [pc, #160]	; (8000308 <initialise_power+0x2e>)
	LDR R4, [R4]
 8000266:	6824      	ldr	r4, [r4, #0]

08000268 <tx_uart>:

tx_uart:

	LDR R1, [R0, USART_ISR] @ load the status of the UART4
 8000268:	69c1      	ldr	r1, [r0, #28]
	ANDS R1, 1 << UART_TXE @ 'AND' the current status with the bit mask that we are interested in
 800026a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ tx_uart @ loop back to check status again if the flag indicates there is no byte waiting
 800026e:	d0fb      	beq.n	8000268 <tx_uart>

	@MOV R5, 0x53
	LDRB R5, [R3], #1
 8000270:	f813 5b01 	ldrb.w	r5, [r3], #1

	STRB R5, [R0, USART_TDR]
 8000274:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	SUBS R4, #1
 8000278:	3c01      	subs	r4, #1
	BGT tx_uart
 800027a:	dcf5      	bgt.n	8000268 <tx_uart>

	BL delay_loop
 800027c:	f000 f801 	bl	8000282 <delay_loop>

	B tx_loop
 8000280:	e7ef      	b.n	8000262 <tx_loop>

08000282 <delay_loop>:


delay_loop:
	LDR R9, =0xfffff
 8000282:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800030c <initialise_power+0x32>

08000286 <delay_inner>:

delay_inner:

	SUBS R9, #1
 8000286:	f1b9 0901 	subs.w	r9, r9, #1
	BGT delay_inner
 800028a:	dcfc      	bgt.n	8000286 <delay_inner>
	BX LR @ return from function call
 800028c:	4770      	bx	lr

0800028e <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800028e:	481b      	ldr	r0, [pc, #108]	; (80002fc <initialise_power+0x22>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000290:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 8000292:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 8000296:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 800029a:	6001      	str	r1, [r0, #0]

0800029c <wait_for_HSERDY>:

wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800029c:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 800029e:	f411 3f00 	tst.w	r1, #131072	; 0x20000
	BEQ wait_for_HSERDY
 80002a2:	d0fb      	beq.n	800029c <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 80002a4:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC
 80002a6:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 80002aa:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 80002ae:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002b0:	4812      	ldr	r0, [pc, #72]	; (80002fc <initialise_power+0x22>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 80002b2:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 80002b4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 80002b8:	6001      	str	r1, [r0, #0]

080002ba <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 80002ba:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 80002bc:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
	BEQ wait_for_PLLRDY
 80002c0:	d0fb      	beq.n	80002ba <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80002c2:	480e      	ldr	r0, [pc, #56]	; (80002fc <initialise_power+0x22>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 80002c4:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 80002c6:	f240 4202 	movw	r2, #1026	; 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 80002ca:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 80002ce:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 80002d0:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 80002d2:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 80002d6:	6041      	str	r1, [r0, #4]

	BX LR @ return
 80002d8:	4770      	bx	lr

080002da <initialise_power>:
.equ PWREN, 28
.equ SYSCFGEN, 0
initialise_power:

	@ enable clock power
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002da:	4808      	ldr	r0, [pc, #32]	; (80002fc <initialise_power+0x22>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 80002dc:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 80002de:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 80002e2:	61c1      	str	r1, [r0, #28]

	@ enable clock config
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 80002e4:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 80002e6:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 80002ea:	6181      	str	r1, [r0, #24]
	BX LR @ return
 80002ec:	4770      	bx	lr
 80002ee:	0000      	.short	0x0000
	LDR R6, =incoming_buffer
 80002f0:	20000000 	.word	0x20000000
	LDR R7, =incoming_counter
 80002f4:	2000003e 	.word	0x2000003e
	LDR R0, =UART4 @ the base address for the register to set up UART4
 80002f8:	40004c00 	.word	0x40004c00
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80002fc:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 8000300:	48000800 	.word	0x48000800
	LDR R3, =tx_string
 8000304:	2000003f 	.word	0x2000003f
	LDR R4, =tx_length
 8000308:	20000048 	.word	0x20000048
	LDR R9, =0xfffff
 800030c:	000fffff 	.word	0x000fffff

08000310 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

	assembly_function();
 8000314:	f7ff ff5e 	bl	80001d4 <assembly_function>

    /* Loop forever */
	for(;;);
 8000318:	e7fe      	b.n	8000318 <main+0x8>
	...

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000320:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480c      	ldr	r0, [pc, #48]	; (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490d      	ldr	r1, [pc, #52]	; (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0a      	ldr	r2, [pc, #40]	; (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0a      	ldr	r4, [pc, #40]	; (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 f811 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ffdf 	bl	8000310 <main>

08000352 <LoopForever>:

LoopForever:
  b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000360:	080003d8 	.word	0x080003d8
  ldr r2, =_sbss
 8000364:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000368:	20000068 	.word	0x20000068

0800036c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC1_2_IRQHandler>
	...

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4d0d      	ldr	r5, [pc, #52]	; (80003a8 <__libc_init_array+0x38>)
 8000374:	4c0d      	ldr	r4, [pc, #52]	; (80003ac <__libc_init_array+0x3c>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	2600      	movs	r6, #0
 800037c:	42a6      	cmp	r6, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	4d0b      	ldr	r5, [pc, #44]	; (80003b0 <__libc_init_array+0x40>)
 8000382:	4c0c      	ldr	r4, [pc, #48]	; (80003b4 <__libc_init_array+0x44>)
 8000384:	f000 f818 	bl	80003b8 <_init>
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	2600      	movs	r6, #0
 800038e:	42a6      	cmp	r6, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f855 3b04 	ldr.w	r3, [r5], #4
 8000398:	4798      	blx	r3
 800039a:	3601      	adds	r6, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a2:	4798      	blx	r3
 80003a4:	3601      	adds	r6, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003d0 	.word	0x080003d0
 80003ac:	080003d0 	.word	0x080003d0
 80003b0:	080003d0 	.word	0x080003d0
 80003b4:	080003d4 	.word	0x080003d4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr
