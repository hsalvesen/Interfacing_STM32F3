
Exercise-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000184  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000318  08000318  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000318  08000318  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000318  08000318  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000318  08000318  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000047d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  000204b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  00020591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00020618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003af9  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  00024180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  000241b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000250e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  00025134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000300 	.word	0x08000300

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000300 	.word	0x08000300

080001d4 <assembly_function>:
.align

.text

assembly_function:
	LDR R6, =0x00		// We use R6 as the register to determine whether to run Board 1, 2, or 3 code.
 80001d4:	f04f 0600 	mov.w	r6, #0

	CMP R6, 0x01
 80001d8:	2e01      	cmp	r6, #1
	BLT board_0_init
 80001da:	db01      	blt.n	80001e0 <board_0_init>
	BEQ board_1_init
 80001dc:	d009      	beq.n	80001f2 <board_1_init>
	B board_2_init
 80001de:	e010      	b.n	8000202 <board_2_init>

080001e0 <board_0_init>:

	board_0_init:
		// Load the address of an ascii string into some register
		LDR R1, =board_0_string
 80001e0:	491a      	ldr	r1, [pc, #104]	; (800024c <forever_loop+0x2>)

		// Initialise serial transmission
		// Initialise LED output
		BL enableClocks
 80001e2:	f000 f821 	bl	8000228 <enableClocks>
		BL setupGPIO
 80001e6:	f000 f825 	bl	8000234 <setupGPIO>

		// R0 will always hold Port A's base address
		LDR R0, =GPIOA_BASE
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

		// R2 will always hold Port E's base address
		LDR R2, =GPIOE_BASE
 80001ee:	4a18      	ldr	r2, [pc, #96]	; (8000250 <forever_loop+0x6>)

		B board_0_loop
 80001f0:	e00f      	b.n	8000212 <board_0_loop>

080001f2 <board_1_init>:

	board_1_init:
		// Initialise serial receiver and transmitter
		// Initialise delay timer
			// Initialise LED
		BL enableClocks
 80001f2:	f000 f819 	bl	8000228 <enableClocks>
		BL setupGPIO
 80001f6:	f000 f81d 	bl	8000234 <setupGPIO>

		// R0 will always hold Port A's base address
		LDR R0, =GPIOA_BASE
 80001fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

		// R2 will always hold Port E's base address
		LDR R2, =GPIOE_BASE
 80001fe:	4a14      	ldr	r2, [pc, #80]	; (8000250 <forever_loop+0x6>)

		B board_1_loop
 8000200:	e00e      	b.n	8000220 <board_1_loop>

08000202 <board_2_init>:

	board_2_init:
		// Initialise serial receiver
		// Initialise LED output
		BL enableClocks
 8000202:	f000 f811 	bl	8000228 <enableClocks>
		BL setupGPIO
 8000206:	f000 f815 	bl	8000234 <setupGPIO>

		// R0 will always hold Port A's base address
		LDR R0, =GPIOA_BASE
 800020a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

		// R2 will always hold Port E's base address
		LDR R2, =GPIOE_BASE
 800020e:	4a10      	ldr	r2, [pc, #64]	; (8000250 <forever_loop+0x6>)

		B board_2_loop
 8000210:	e008      	b.n	8000224 <board_2_loop>

08000212 <board_0_loop>:

	end_board_init:

	board_0_loop:
		// Load the character at the current register into the character register and increment the pointer
		LDRB R0, [R1], #1
 8000212:	f811 0b01 	ldrb.w	r0, [r1], #1

		// Display the character register on the LEDs
		STRB R0, [R2, #ODR + 1] // Store the value in ODR [15:8]
 8000216:	7550      	strb	r0, [r2, #21]

		// Transmit the character over serial

		// If the character is a 0, reset the pointer to the beginning of the string
		CMP R0, #0x00
 8000218:	2800      	cmp	r0, #0
		BNE board_0_loop
 800021a:	d1fa      	bne.n	8000212 <board_0_loop>
		LDR R1, =board_0_string
 800021c:	490b      	ldr	r1, [pc, #44]	; (800024c <forever_loop+0x2>)

		B board_0_loop
 800021e:	e7f8      	b.n	8000212 <board_0_loop>

08000220 <board_1_loop>:

	board_1_loop:
		// Wait until serial character is received
		// Load character into register from serial
		// Display character to
		STRB R0, [R2, #ODR + 1] // Store the value in ODR [15:8]
 8000220:	7550      	strb	r0, [r2, #21]

		// Delay until timer is done
		// Transmit the character to serial
		B board_1_loop
 8000222:	e7fd      	b.n	8000220 <board_1_loop>

08000224 <board_2_loop>:

	board_2_loop:
		// Wait until serial character is received
		// Load character into register from serial
		// Display character ot LEDs
		STRB R0, [R2, #ODR + 1] // Store the value in ODR [15:8]
 8000224:	7550      	strb	r0, [r2, #21]

		B board_2_loop
 8000226:	e7fd      	b.n	8000224 <board_2_loop>

08000228 <enableClocks>:
	enableClocks:
		LDR R0, =RCC // Load register with clock base adderss
 8000228:	480a      	ldr	r0, [pc, #40]	; (8000254 <forever_loop+0xa>)
		LDR R1, [R0, #AHBENR] // Load R1 with peripheral clock register's values
 800022a:	6941      	ldr	r1, [r0, #20]
		ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOE_ENABLE // Set relevant bits to enable clocks for Port A and E
 800022c:	f441 1108 	orr.w	r1, r1, #2228224	; 0x220000
		STR R1, [R0, #AHBENR] // Store the valye back into the preipheral clock register
 8000230:	6141      	str	r1, [r0, #20]
		BX LR // Return from function
 8000232:	4770      	bx	lr

08000234 <setupGPIO>:
	setupGPIO:

		// LEDs
		LDR R0, =GPIOE_BASE // Load base address of Port E's GPIO
 8000234:	4806      	ldr	r0, [pc, #24]	; (8000250 <forever_loop+0x6>)
		LDRH R2, =0x5555 // value to set 8 pins (the LEDs) to output
 8000236:	f245 5255 	movw	r2, #21845	; 0x5555
		STRH R2, [R0, #MODER+2] // Actually set the values in the high 16 bits of the mode register
 800023a:	8042      	strh	r2, [r0, #2]


		// Push button
		LDR R0, =GPIOA_BASE // Load register 0 with GPIOA address
 800023c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		LDRB R1, [R0, #MODER] // Load register 1 with the lowest byte in R0 offset by 0
 8000240:	7801      	ldrb	r1, [r0, #0]
		AND R1, #0b11111100 // Clear bits for PA0, but leave the rest as they are
 8000242:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
		STRB R1, [R0, #MODER] // Store result in GPIOA's low byte
 8000246:	7001      	strb	r1, [r0, #0]

		BX LR // Return from function
 8000248:	4770      	bx	lr

0800024a <forever_loop>:



forever_loop:
	B forever_loop
 800024a:	e7fe      	b.n	800024a <forever_loop>
		LDR R1, =board_0_string
 800024c:	20000000 	.word	0x20000000
		LDR R2, =GPIOE_BASE
 8000250:	48001000 	.word	0x48001000
		LDR R0, =RCC // Load register with clock base adderss
 8000254:	40021000 	.word	0x40021000

08000258 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	assembly_function();
 800025c:	f7ff ffba 	bl	80001d4 <assembly_function>
    /* Loop forever */
	for(;;);
 8000260:	e7fe      	b.n	8000260 <main+0x8>
	...

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 f811 	bl	80002b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ffdf 	bl	8000258 <main>

0800029a <LoopForever>:

LoopForever:
  b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80002a8:	08000320 	.word	0x08000320
  ldr r2, =_sbss
 80002ac:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80002b0:	20000024 	.word	0x20000024

080002b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC1_2_IRQHandler>
	...

080002b8 <__libc_init_array>:
 80002b8:	b570      	push	{r4, r5, r6, lr}
 80002ba:	4d0d      	ldr	r5, [pc, #52]	; (80002f0 <__libc_init_array+0x38>)
 80002bc:	4c0d      	ldr	r4, [pc, #52]	; (80002f4 <__libc_init_array+0x3c>)
 80002be:	1b64      	subs	r4, r4, r5
 80002c0:	10a4      	asrs	r4, r4, #2
 80002c2:	2600      	movs	r6, #0
 80002c4:	42a6      	cmp	r6, r4
 80002c6:	d109      	bne.n	80002dc <__libc_init_array+0x24>
 80002c8:	4d0b      	ldr	r5, [pc, #44]	; (80002f8 <__libc_init_array+0x40>)
 80002ca:	4c0c      	ldr	r4, [pc, #48]	; (80002fc <__libc_init_array+0x44>)
 80002cc:	f000 f818 	bl	8000300 <_init>
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	10a4      	asrs	r4, r4, #2
 80002d4:	2600      	movs	r6, #0
 80002d6:	42a6      	cmp	r6, r4
 80002d8:	d105      	bne.n	80002e6 <__libc_init_array+0x2e>
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e0:	4798      	blx	r3
 80002e2:	3601      	adds	r6, #1
 80002e4:	e7ee      	b.n	80002c4 <__libc_init_array+0xc>
 80002e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ea:	4798      	blx	r3
 80002ec:	3601      	adds	r6, #1
 80002ee:	e7f2      	b.n	80002d6 <__libc_init_array+0x1e>
 80002f0:	08000318 	.word	0x08000318
 80002f4:	08000318 	.word	0x08000318
 80002f8:	08000318 	.word	0x08000318
 80002fc:	0800031c 	.word	0x0800031c

08000300 <_init>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr

0800030c <_fini>:
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	bf00      	nop
 8000310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000312:	bc08      	pop	{r3}
 8000314:	469e      	mov	lr, r3
 8000316:	4770      	bx	lr
